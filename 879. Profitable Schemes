class Solution {
public:
    Solution(){
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
    int mod=1e9+7;
    int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        vector<vector<vector<int>>>dp(group.size() + 1, vector<vector<int>>(n + 1, vector<int>(minProfit + 1, 0)));
        dp[0][0][0]=1;
        for(int i=1;i<=group.size();i++){
            int g=group[i-1];
            int p=profit[i-1];
            for(int j=0;j<=n;j++){
                for(int k=0;k<=minProfit;k++){
                    dp[i][j][k]=dp[i-1][j][k];
                    if(j>=g){
                        dp[i][j][k]=(dp[i][j][k]+dp[i-1][j-g][max(0,k-p)])%mod;
                    }
                }
            }
        }
        int sum=0;
        for(int i=0;i<=n;i++){
            sum=(sum+dp[group.size()][i][minProfit])%mod;
        }
        return sum;
    }
};
